theta = c(-1.5, 3, -0.5)
X = c(1, 1, 5)
logit = T(theta) * X
logit = t(theta) * X
odds = exp(logit)
logit
logit = theta * t(X)
logit
logit = theta %*% t(X)
logit
logit = t(theta) %*% X
logit
odss = exp(logit)
odss
1 / (1 + odss)
1 / (1 + exp(1))
install.packages("mice")
library(mice)
Sys.which("make")
install.packages("mice", type = "source")
install.packages("Rcpp")
install.packages("mice")
library(mice)
w
library(Rcpp)
install.packages("Rcpp")
library(Rcpp)
install.packages("Rcpp")
library(Rcpp)
library(Rcpp)
version
install.packages(c("tidyverse","rmarkdown","shiny",
"lubridate","xaringan"))
install.packages("rmarkdown")
install.packages("Rtools")
Sys.which("make")
convert_temperature <- function(value, F_to_C) {
if (F_to_C) {
result = value * 9 / 5 + 32
} else {
result = (value - 32) * 5 / 9
}
return(result)
}
convert_temperature(30,F_to_C = FALSE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
calculate_ffuture_value = function(investment, interest, duration_in_years) {
FV = investment * (1 + interest) ^ duration_in_years
}
calculate_future_value(investment = 100, interest = 0.07, duration_in_years = 5)
rm(calculate_ffuture_value)
source('~/.active-rstudio-document', echo=TRUE)
calculate_future_value = function(investment, interest, duration_in_years) {
FV = investment * (1 + interest) ^ duration_in_years
return(FV)
}
calculate_future_value(investment = 100, interest = 0.07, duration_in_years = 5)
a = c()
a
letters
rand(3)
rnorm(3)
source('~/.active-rstudio-document', echo=TRUE)
generate_hex_code = function(n) {
result = c()
for (i in 1:n) {
result = c(result, rgb(rnorm(3)))
}
return(result)
}
generate_hex_code(n=3)
generate_hex_code = function(n) {
result = c()
for (i in 1:n) {
result = c(result, rgb(rnorm(1), rnorm(1), rnorm(1)))
}
return(result)
}
generate_hex_code(n=3)
generate_hex_code = function(n) {
result = c()
for (i in 1:n) {
result = c(result, rgb(abs(rnorm(1)), abs(rnorm(1)), abs(rnorm(1))))
}
return(result)
}
generate_hex_code(n=3)
runif(3)
generate_hex_code = function(n) {
result = c()
for (i in 1:n) {
result = c(result, rgb(runif(1), runif(1), runif(1)))
}
return(result)
}
generate_hex_code(n=3)
retunr(result)
get_prob_dice = function(k, n) {
result = rbinom(k, n)
return(result)
}
get_prob_dice(3, 5)
get_prob_dice = function(k, n) {
result = rbinom(k, n, prob = 1/6)
return(result)
}
get_prob_dice(3, 5)
get_prob_dice = function(k, n) {
result = dbinom(k, n, prob = 1/6)
return(result)
}
get_prob_dice(3, 5)
options = c("rock", "paper","scissors")
comp = options[sample(1:3, 1)]
comp
options = c("rock", "paper","scissors")
comp = options[sample(1:3, 1)]
comp
options = c("rock", "paper","scissors")
comp = options[sample(1:3, 1)]
comp
options = c("rock", "paper","scissors")
comp = options[sample(1:3, 1)]
comp
options = c("rock", "paper","scissors")
comp = options[sample(1:3, 1)]
comp
comp = options[sample(1:3, 1)]
comp
comp = options[sample(1:3, 1)]
comp
comp = options[sample(1:3, 1)]
comp
winner_check = function(comp, input) {
if (comp == input) {
print(paste("I choose ", comp, ". It is tie!"))
} else if ((comp == "rock" & input == "scissors") | (comp == "scissors" & input == "paper") | (comp == "paper" % input == "rock")) {
print(paste("I choose ", comp, ". You lose!"))
} else {
print(paste("I choose ", comp, ". You win!"))
}
}
winner_check = function(comp, input) {
if (comp == input) {
print(paste("I choose ", comp, ". It is tie!"))
} else if ((comp == "rock" & input == "scissors") | (comp == "scissors" & input == "paper") | (comp == "paper" & input == "rock")) {
print(paste("I choose ", comp, ". You lose!"))
} else {
print(paste("I choose ", comp, ". You win!"))
}
}
rsp_game = function(input) {
options = c("rock", "paper","scissors")
comp = options[sample(1:3, 1)]
winner_check(comp, input)
}
rsp_game("rock")
rsp_game("rock")
rsp_game("rock")
c(letters, 0:9)
generate_hex_code = function(n) {
options = c(letters, 0:9)
result = c()
for (i in 1:n) {
result = c(result, paste0('#', paste0(sample(options, 6, replace = TRUE), collapse =  "")))
}
return(result)
}
generate_hex_code(n=3)
options = c(letters, 0:9)
if(3%2){print(1)}
if (3%%3) {
print(1)
}
if (3%%2) {
print(1)
}
setwd("~/GitHub/boun01-TahaBayaz")
data = read.csv("ptf-smf.csv")
data$PTF = as.numeric(data$PTF)
data$PTF[1]
data = read.csv("ptf-smf.csv")
data$PTF[1]
data$PTF = as.numeric(gsub(",", ".", gsub("\\.", "", data$PTF)))
data$PTF[1]
data$Tarih[1]
setwd("~/GitHub/boun01-TahaBayaz")
